apply plugin: 'com.android.application'

android {
    compileSdkVersion PROP_COMPILE_SDK_VERSION.toInteger()
    buildToolsVersion PROP_BUILD_TOOLS_VERSION

    defaultConfig {
        multiDexEnabled true
        applicationId "com.vdopia.interstitialsample"
        minSdkVersion PROP_MIN_SDK_VERSION
        targetSdkVersion PROP_TARGET_SDK_VERSION
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            if (PROP_BUILD_TYPE == 'ndk-build') {
                ndkBuild {
                    targets 'MyGame'
                    arguments 'NDK_TOOLCHAIN_VERSION=clang'
                    arguments '-j' + Runtime.runtime.availableProcessors()
                }
            }
            else if (PROP_BUILD_TYPE == 'cmake') {
                cmake {
                    targets 'MyGame'
                    arguments "-DCMAKE_FIND_ROOT_PATH=", "-DANDROID_STL=c++_static", "-DANDROID_TOOLCHAIN=clang", "-DANDROID_ARM_NEON=TRUE", \
                              "-DUSE_CHIPMUNK=TRUE", "-DUSE_BULLET=TRUE"
                    cppFlags "-frtti -fexceptions"
                    // prebuilt root must be defined as a directory which you have right to access or create if you use prebuilt
                    // set "-DGEN_COCOS_PREBUILT=ON" and "-DUSE_COCOS_PREBUILT=OFF" to generate prebuilt,  this way build cocos2d-x libs
                    // set "-DGEN_COCOS_PREBUILT=OFF" and "-DUSE_COCOS_PREBUILT=ON" to use prebuilt, this way not build cocos2d-x libs
                    //arguments "-DCOCOS_PREBUILT_ROOT=/Users/laptop/cocos-prebuilt"
                    //arguments "-DGEN_COCOS_PREBUILT=OFF", "-DUSE_COCOS_PREBUILT=OFF"
                }
            }
        }

        ndk {
            abiFilters = []
            abiFilters.addAll(PROP_APP_ABI.split(':').collect{it as String})
        }
    }

    sourceSets.main {
        java.srcDir "src"
        res.srcDir "res"
        manifest.srcFile "AndroidManifest.xml"
        assets.srcDir "../../Resources"
    }

    externalNativeBuild {
        if (PROP_BUILD_TYPE == 'ndk-build') {
            ndkBuild {
                path "jni/Android.mk"
            }
        }
        else if (PROP_BUILD_TYPE == 'cmake') {
            cmake {
                path "../../CMakeLists.txt"
            }
        }
    }

    signingConfigs {

       release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }

            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=0'
                }
            }
        }

        debug {
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=1'
                }
            }
        }
    }
}

android.applicationVariants.all { variant ->
    // delete previous files first
    delete "${buildDir}/intermediates/assets/${variant.dirName}"

    variant.mergeAssets.doLast {
        copy {
            from "${buildDir}/../../../Resources"
            into "${buildDir}/intermediates/assets/${variant.dirName}"
            exclude "**/*.gz"
        }
    }
}


repositories {
    maven { url 'https://jitpack.io' }
    maven { url "https://adcolony.bintray.com/AdColony" }
   // maven { url "https://dl.bintray.com/ironsource-mobile/android-sdk" }
    maven { url "https://dl.bintray.com/vdopiacorp/sdk" }
    maven { url "http://repository.youappi.com/repository/release" }
    // If you're using a version of Gradle greater than or equal to 4.1, you must use:
    google()

    // If you're using a version of Gradle lower than 4.1, you must use:
    // maven { url 'https://maven.google.com' }

    maven { url "https://maven.fabric.io/public" }

    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':libcocos2dx')

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //If your application is UNITY 3D, uncomment the following line
    //implementation("com.vdopia.ads.lw:unity-plugin:1.1.3")

    //If your application is CORDOVA, uncomment the following line
    //implementation("com.vdopia.ads.lw:cordova-plugin:1.0.4")

    //If your application is COCOS-2DX, uncomment the following line
    implementation("com.vdopia.ads.lw:cocos2dx-plugin:1.0.3")

    implementation("com.vdopia.ads.lw:coresdk:2.5.4.2")
    implementation("com.vdopia.ads.lw:adcolony-adapter:1.0.7")
    implementation("com.vdopia.ads.lw:applovin-adapter:1.0.8")
    implementation("com.vdopia.ads.lw:baidu-adapter:1.0.5")
    implementation("com.vdopia.ads.lw:chartboost-adapter:1.0.7")
    implementation("com.vdopia.ads.lw:facebook-adapter:1.0.5")
    implementation("com.vdopia.ads.lw:google-adapter:1.0.9")
    implementation("com.vdopia.ads.lw:inmobi-adapter:1.0.9")
   // implementation("com.vdopia.ads.lw:ironsrc-adapter:1.0.9")
    implementation("com.vdopia.ads.lw:mopub-adapter:1.0.8")
    implementation("com.vdopia.ads.lw:ogury-adapter:1.0.3")
    implementation("com.vdopia.ads.lw:youappi-adapter:1.0.5")
    implementation("com.vdopia.ads.lw:tapjoy-adapter:1.0.5")
    implementation("com.vdopia.ads.lw:unity-adapter:1.0.9")
    implementation("com.vdopia.ads.lw:vungle-adapter:1.0.5")
    implementation("com.vdopia.ads.lw:yahoo-adapter:1.0.7")

    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'com.devbrackets.android:exomedia:4.0.3'
    implementation 'com.adcolony:sdk:3.3.3'
    implementation 'com.inmobi.monetization:inmobi-ads:7.1.0'
    implementation 'com.applovin:applovin-sdk:8.0.0'
    implementation 'com.flurry.android:ads:10.0.0'
    implementation 'com.google.ads.interactivemedia.v3:interactivemedia:3.7.4'
   // implementation 'com.ironsource.sdk:mediationsdk:6.7.9@jar'
    implementation "com.youappi.sdk:youappi-sdk-android-moat:4.1.1"

    //google support and google play services libraries
    implementation "com.google.android.gms:play-services-ads:15.0.1"
    implementation "com.google.android.gms:play-services-gcm:15.0.1"

    implementation "com.android.support:support-annotations:27.1.1"
    implementation "com.android.support:appcompat-v7:27.1.1"
    implementation "com.android.support:support-v4:27.1.1"
    implementation "com.android.support:palette-v7:27.1.1"
    implementation 'com.android.support:multidex:1.0.3'

}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion("27.1.1")
            }
        }
    }
}